{
	"nodes":[
		{"id":"af89b6e833f70177","type":"group","x":-510,"y":-1390,"width":1020,"height":2780,"color":"4","label":"2 - Architectural Styles"},
		{"id":"6c3f829ae3363605","type":"text","text":"***Exercises***","x":-130,"y":870,"width":280,"height":60,"color":"4"},
		{"id":"b6276844ceb99310","type":"text","text":"**Message Oriented Middleware**\n- Modules communicate through asynchronous messages, using a *Message Queue (Broker)*.","x":-130,"y":490,"width":280,"height":240,"color":"4"},
		{"id":"d20a322c7d4f3fed","type":"text","text":"**Microservices**\n- Instead of a single monolithic service, small independent services are created.\n- Scalability and maintainability\n- Partial failures\n- Use separate databases\n- Microservices are more complex, ideal for large projects.","x":-130,"y":50,"width":280,"height":380,"color":"4"},
		{"id":"dc4f008824d61f04","type":"text","text":"**Pipes**\n- Are unidirectional communication channels where data flows from one filter to another.","x":-310,"y":-330,"width":280,"height":200,"color":"4"},
		{"id":"fbb6f7cfba5221f1","type":"text","text":"**Filters**\n- Are independent components or modules that perform data processing tasks.","x":30,"y":-330,"width":280,"height":200,"color":"4"},
		{"id":"c0cfd1fd203ba389","type":"text","text":"**Trade-offs of Non-functional Requirements**\n- When building a system focused on non-functional security requirements at the expense of others, there will be some trade-offs.\n- An extremely secure system may not deliver the fastest response in all situations.","x":-490,"y":960,"width":280,"height":400,"color":"4"},
		{"id":"85b087abc4adcf06","type":"text","text":"**Monolith Problems**\n- Slow release\n- Changes in one module can impact others already functioning\n- Risk of adding new features","x":-490,"y":350,"width":280,"height":240,"color":"4"},
		{"id":"4f2e323a3a019bf3","type":"text","text":"**Monolith**\n- All modules are in a single source code.\n- Simple\n- Difficult to scale and maintain\n- Ideal only for small projects.","x":-490,"y":50,"width":280,"height":280,"color":"4"},
		{"id":"c20e7443403a575f","type":"text","text":"**Model-View-Controller (MVC)**\n- View: GUIs, windows, buttons, interaction\n- Controller: Handles events produced by the View (e.g., when a button is pressed)\n- Model: Classes with the logic and data of the software","x":-130,"y":-780,"width":280,"height":350,"color":"4"},
		{"id":"5d6e7871e2d292f7","type":"text","text":"**Documenting**\n- Supports scalability, security, ease of future implementation. Assists other developers on the team and provides a clearer overall view.","x":-130,"y":975,"width":280,"height":260,"color":"4"},
		{"id":"31c38732fbfbfe2b","type":"text","text":"**Layered Architecture**\n- Organized hierarchically into layers\n- Layer N can only use services from layer N-1\n- More commonly used in networks","x":-490,"y":-780,"width":280,"height":240,"color":"4"},
		{"id":"7db573430ade264a","type":"text","text":"**Architectural Style**\n- Depends on non-functional requirements\n- Performance, robustness, security, availability, maintainability","x":-130,"y":-1060,"width":280,"height":240,"color":"4"},
		{"id":"69f432d4b4f12c96","type":"text","text":"**3-Tier**\n- Client (graphical interface)\n- Application (business logic)\n- Database","x":-490,"y":-1060,"width":280,"height":240,"color":"4"},
		{"id":"94926052a2767541","type":"text","text":"**Repository Architecture**\n- Centralization of data: all system data is in a central repository\n- Consistency, versioning, access control, scalability","x":210,"y":-1140,"width":280,"height":280,"color":"4"},
		{"id":"9c92161efb13cf6c","type":"text","text":"**Architecture**\n- Meeting requirements\n- Applied at a development stage where changes are still easy to make\n- Reducing risks during software construction","x":-130,"y":-1370,"width":280,"height":280,"color":"4"},
		{"id":"b848a9a28a0da700","type":"text","text":"**Decoupling in Space**\n- The user only sees the interface and not the implementation.\n- Enables system components to operate independently, only knowing the interface to communicate without depending on each other's internal details.","x":210,"y":230,"width":280,"height":360,"color":"4"},
		{"id":"c26f6939e81e2cd8","type":"text","text":"**Decoupling in Time**\n- There is no immediate response waiting between components.","x":210,"y":650,"width":280,"height":140,"color":"4"},
		{"id":"5bd43fff7e8b00a7","type":"text","text":"**Is One Pattern Sufficient for the Architecture of a System?**\n- Not always. The complexity of requirements, the context of the problem, the diversity of needs, and the evolution of the system often require the application of multiple architectural patterns.","x":210,"y":960,"width":280,"height":400,"color":"4"},
		{"id":"8cb303c498a04c5c","type":"text","text":"**Client-Server Architecture**\n- Client: Makes requests\n- Server: Provides services\n\n- Centralized\n- Clear division of responsibilities\n- Ease of maintenance and updates\n- Single node may become a bottleneck","x":210,"y":-835,"width":280,"height":350,"color":"4"}
	],
	"edges":[
		{"id":"1ae18924299d86fc","fromNode":"b6276844ceb99310","fromSide":"right","toNode":"b848a9a28a0da700","toSide":"left"},
		{"id":"db6d224e9f7d5153","fromNode":"b6276844ceb99310","fromSide":"right","toNode":"c26f6939e81e2cd8","toSide":"left"},
		{"id":"3c6b22220d85ea50","fromNode":"d20a322c7d4f3fed","fromSide":"bottom","toNode":"b6276844ceb99310","toSide":"top"},
		{"id":"3ca30e5d557b340f","fromNode":"4f2e323a3a019bf3","fromSide":"bottom","toNode":"85b087abc4adcf06","toSide":"top"},
		{"id":"bf93c6544a8eb5ad","fromNode":"7db573430ade264a","fromSide":"bottom","toNode":"c20e7443403a575f","toSide":"top"},
		{"id":"ffd69133b77e01e9","fromNode":"7db573430ade264a","fromSide":"left","toNode":"31c38732fbfbfe2b","toSide":"right"},
		{"id":"89e856078d0c7981","fromNode":"7db573430ade264a","fromSide":"left","toNode":"69f432d4b4f12c96","toSide":"right"},
		{"id":"157574b0f0841432","fromNode":"7db573430ade264a","fromSide":"right","toNode":"94926052a2767541","toSide":"left"},
		{"id":"dd150094eeb301b7","fromNode":"7db573430ade264a","fromSide":"right","toNode":"8cb303c498a04c5c","toSide":"left"}
	]
}